tf$reset_default_graph() #在每次运行中清除当前图形，以避免变量重复#Session会话 张量的具体值和操作,会话关闭时，张量的任何具体值都会丢失
images = tf$placeholder(tf$float32, shape(NULL, NULL, NULL, 3))# 创建占位符
imgs_scaled = tf$image$resize_images(images, shape(224,224)) #设置图片大小# slim$conv2d自带卷积功能+激励函数
fc8 = slim$conv2d(imgs_scaled, 64, shape(3,3), scope='vgg_16/conv1/conv1_1') %>%
slim$conv2d(64, shape(3,3), scope='vgg_16/conv1/conv1_2')  %>%
slim$max_pool2d( shape(2, 2), scope='vgg_16/pool1')  %>% #池化操作
slim$conv2d(128, shape(3,3), scope='vgg_16/conv2/conv2_1')  %>%
slim$conv2d(128, shape(3,3), scope='vgg_16/conv2/conv2_2')  %>%
slim$max_pool2d( shape(2, 2), scope='vgg_16/pool2')  %>%
slim$conv2d(256, shape(3,3), scope='vgg_16/conv3/conv3_1')  %>%
slim$conv2d(256, shape(3,3), scope='vgg_16/conv3/conv3_2')  %>%
slim$conv2d(256, shape(3,3), scope='vgg_16/conv3/conv3_3')  %>%
slim$max_pool2d(shape(2, 2), scope='vgg_16/pool3')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv4/conv4_1')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv4/conv4_2')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv4/conv4_3')  %>%
slim$max_pool2d(shape(2, 2), scope='vgg_16/pool4')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv5/conv5_1')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv5/conv5_2')  %>%
slim$conv2d(512, shape(3,3), scope='vgg_16/conv5/conv5_3')  %>%
slim$max_pool2d(shape(2, 2), scope='vgg_16/pool5')  %>%
slim$conv2d(4096, shape(7, 7), padding='VALID', scope='vgg_16/fc6')  %>%
slim$conv2d(4096, shape(1, 1), scope='vgg_16/fc7') %>%
# Setting the activation_fn=NULL does not work, so we get a ReLU
slim$conv2d(1000, shape(1, 1), scope='vgg_16/fc8')  %>%
tf$squeeze(shape(1, 2), name='vgg_16/fc8/squeezed')
tf$summary$FileWriter('/tmp/dumm/vgg16', tf$get_default_graph())$close() #保存在/tmp/dumm/vgg16目录下
restorer = tf$train$Saver() #创建一个Saver 来管理模型中的所有变量。
sess = tf$Session()
restorer$restore(sess, 'vgg_16.ckpt') #复原模型
library(jpeg)
---------------------
版权声明：本文为CSDN博主「王亨」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wzgl__wh/article/details/79312839
img1<-readJPEG('~/Desktop/caomei.jpg')
d=dim(img1)  #获取img1的维度
imgs =array(255*img1,dim = c(1,d[1],d[2],d[3]))
#因为数值需要在0到225之间，所以需要乘225.形成一个四维数组#我们可以通过与存储在数组imgs中的图像的张量来对图像做预测
fc8_vals=sess$run(fc8,dict(images=imgs))#将fc8的张量存储在fc8_vals中。
---------------------
版权声明：本文为CSDN博主「王亨」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wzgl__wh/article/details/79312839
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
library(shiny)
ui<-{baoming<-fluidPage(
a(href="http://www.nankai.edu.cn", "南开大学官网"),
tags$head(
tags$title('南开大学优秀学生夏令营报名表'),
tags$style(
rel = 'stylesheet',
'.title-panel {background: rgb(126,12,110)} ',
'.title-panel h2 {text-align:center; color:black}'
)
),
div(
class='col-md-12 title-panel',
h2('南开大学优秀学生夏令营报名表')
),
tags$style(
".container div {border: 1px solid gray; min-height:30px;}",
"h4 {color:purple; margin-top: 20px;}"
),
h4("1、基本信息"),
textInput("name","姓名","Your name"),
checkboxGroupInput("sex","性别",c("男"="男","女"="女")),
dateInput("date", "出生日期：", value = Sys.Date()),
h4("2、学业信息"),
textInput("university","学校名称","Your University"),
textInput("school","学院名称","Your School"),
textInput("major","所学专业","Your Major"),
checkboxGroupInput("paimingdanwei","排名单位",c("学院"="学院","专业"="专业")),
textInput("paiming","排名"),
textInput("number","人数"),
fileInput('f', '成绩单', multi=T,accept=c(".jpg",".jpeg",".jpg")),
submitButton("Update View", icon("refresh")),
h4("两栏模板"),
sidebarLayout(
sidebarPanel("side bar panel"),
mainPanel(splitLayout("aaaa", "bbbb", "cccc", "dddd"))
),
h4("垂直分割模板"),
splitLayout("aaaa", "bbbb", "cccc", "dddd"),
h4("垂直排列模板"),
verticalLayout("aaaa", "bbbb", "cccc", "dddd"),
h4("流式（自动折行）模板"),
flowLayout("aaaa", "bbbb", "cccc", "dddd")
)
jianli<-fluidPage(
splitLayout(splitLayout("姓名", verbatimTextOutput("jianli_name")),splitLayout("性别", verbatimTextOutput("jianli_sex")),br()),
splitLayout(splitLayout("出生日期", verbatimTextOutput("jianli_date"))),
splitLayout(splitLayout("学校名称", verbatimTextOutput("jianli_university")),splitLayout("学院名称",verbatimTextOutput("jianli_school"))),
splitLayout(verbatimTextOutput("jianli_paimingdanwei") ,splitLayout("排名", verbatimTextOutput("jianli_paiming")),splitLayout("人数",verbatimTextOutput("jianli_number")),
splitLayout("排名百分比",verbatimTextOutput("jianli_baifenbi")))
)
header <- dashboardHeader(title="南开大学夏令营")
sidebar <- dashboardSidebar(
sidebarUserPanel("User Name",
subtitle = a(href = "#", icon("circle", class = "text-success"), "Online"),
# Image file should be in www/ subdir
image = "userimage.png"
),
sidebarSearchForm(label = "Enter a number", "searchText", "searchButton"),
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("报名表", tabName = "baomingbiao", icon = icon("dashboard")),
menuItem("生成简历", icon = icon("th"), tabName = "jianli", badgeLabel = "to-do",
badgeColor = "green"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
)
body<-dashboardBody(
tabItems(
tabItem("baomingbiao",baoming),
tabItem("jianli",jianli)
)
)
dashboardPage(header, sidebar, body,skin = "purple")
}
server<-{options(shiny.maxRequestSize=30*1024^2)
shinyServer(function(input, output,session) {
output$jianli_name<-renderText({input$name})
output$jianli_sex<-renderText({input$sex})
output$jianli_date<-renderText({format(input$date)})
output$jianli_university<-renderText({input$university})
output$jianli_school<-renderText({input$school})
output$jianli_major<-renderText({input$major})
output$jianli_paiming<-renderText({input$paiming})
output$jianli_number<-renderText({input$number})
output$jianli_paimingdanwei<-renderText({input$paimingdanwei})
output$jianli_baifenbi<-renderText({
p<-as.numeric(input$paiming)
n<-as.numeric(input$number)
t<-p/n*100
t<-round(t,2)
paste(t,"%")
})
observe({
paimingdanwei<-input$paimingdanwei
updateTextInput(session, "paiming", label = paste(paimingdanwei,"排名"))
updateTextInput(session, "number", label = paste(paimingdanwei,"人数"))
})
})}
shinyApp(ui,server
)
runApp()
runApp()
runApp()
runApp()
runApp()
def main(_)
def main(_)""
def main(_):
def run(main=None, argv=None):
"""Runs the program with an optional 'main' function and 'argv' list."""
f = flags.FLAGS
# Extract the args from the optional `argv` list.
args = argv[1:] if argv else None
# Parse the known flags from that list, or from the command
# line otherwise.
# pylint: disable=protected-access
flags_passthrough = f._parse_flags(args=args)
# pylint: enable=protected-access
main = main or _sys.modules['__main__'].main
# Call the main function, passing through any arguments
# to the final program.
_sys.exit(main(_sys.argv[:1] + flags_passthrough))
---------------------
版权声明：本文为CSDN博主「KEE_HA」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/KEE_HA/article/details/85047522
runApp()
options(shiny.maxRequestSize=30*1024^2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
header <- dashboardHeader(title="doodle look at me")
sidebar <- dashboardSidebar(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
sliderInput("obs","rows:",1,50,20)
)
body <- dashboardBody(tableOutput("view"))
ui <- dashboardPage(header, sidebar, body,skin = "green")
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
shinyApp(ui = ui, server = server)
library(shinydashboard)
header <- dashboardHeader(title="doodle look at me")
sidebar <- dashboardSidebar(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
sliderInput("obs","rows:",1,50,20)
)
body <- dashboardBody(tableOutput("view"))
ui <- dashboardPage(header, sidebar, body,skin = "green")
server <- function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp()
runApp()
runApp()
?fileInput
runApp()
runApp()
?as.Date
runApp()
?textInput
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing optgroup support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
runApp()
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
shinyApp(
ui = fluidPage(
varSelectInput("variables", "Variable:", mtcars, multiple = TRUE),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
if (length(input$variables) == 0) return(mtcars)
mtcars %>% dplyr::select(!!!input$variables)
}, rownames = TRUE)
}
)
## End(Not run)
}
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
shinyApp(
ui = fluidPage(
varSelectInput("variables", "Variable:", mtcars, multiple = TRUE),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
if (length(input$variables) == 0) return(mtcars)
mtcars %>% dplyr::select(!!!input$variables)
}, rownames = TRUE)
}
)
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui<-{shinyUI(
fluidPage(
titlePanel(title = "分级菜单"),
sidebarLayout(
sidebarPanel(
selectInput("region", "地区:",
choices = region),
uiOutput("slt_store")
),
mainPanel(
div(strong("原始数据"), style = "color:blue"),
tableOutput("df1"),
br(),
div(strong("筛选后的数据"), style = "color:blue"),
tableOutput("df2")
)
)
))
}
options(stringsAsFactors=FALSE, scipen=10, digits=4)
library(dplyr)
df_sample <- data.frame(region=rep(LETTERS[1:3], 4),
store=paste(rep(LETTERS[1:3], 4), 1:4, sep=""),
result=sample(1:100, 12))
region <- unique(df_sample$region)
---------------------
版权声明：本文为CSDN博主「xwydq」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/xwydq/article/details/51152988
ui<-{library(shiny)
library(shinydashboard)
shinyUI(
dashboardPage(
dashboardHeader(title = "分级菜单"),
dashboardSidebar(
sidebarMenu(
selectInput("region", "地区:",
choices = region),
uiOutput("slt_store"),
menuItem("分级菜单", tabName = "tab_budget", icon = icon("gear"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "tab_budget",
fluidRow(
# 原始数据
box(h1("原始数据"),
tableOutput("df1")),
# 筛选结果
box(h1("筛选结果"),
tableOutput("df2"))
)
)
)
)
)
)
}
server<-{}
server<-{shinyServer(function(input, output) {
store_t <- reactive({
df_sample %>%
filter(region == input$region) %>%
select(store)
})
# 在server.R中使用renderUI
output$slt_store <- renderUI({
selectInput("store", "门店:", choices = store_t()$store)
})
output$df1 <- renderTable({
df_sample %>%
arrange(region, store)
})
output$df2 <- renderTable({
df_sample %>%
filter(region == input$region) %>%
filter(store == input$store)
})
})
}
shinyApp(ui,server)
df_sample
jiangxiang<-c("北美建模","全国大学生数学建模","全国大学生数学竞赛","奖学金")
jiangxiangjibie<-c("M奖","H奖","全国一等","全国二等","全国三等","省级一等","省级二等","省级三等","国家级","省级","市级","校级")
Jiangxiang<-rep(jiangxiang,each=c(2,6,6,4))
Jiangxiangjibie<-paste(Jiangxiang,jiangxiangjibie,sep="")
?rep
jiangxiang<-c("北美建模","全国大学生数学建模","全国大学生数学竞赛","奖学金")
jiangxiangjibie<-c("M奖","H奖","全国一等","全国二等","全国三等","省级一等","省级二等","省级三等","国家级","省级","市级","校级")
Jiangxiang<-rep(jiangxiang,c(2,6,6,4))
Jiangxiangjibie<-paste(Jiangxiang,jiangxiangjibie,sep="")
Jiangxiangjibie
JX<-data.frame(Jiangxiang,Jiangxiangjibie,result=LETTERS[1:18])
JX
runApp()
ui <- dashboardPage(
dashboardHeader(title = "Dynamic boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(width = 2, actionButton("count", "Count")),
infoBoxOutput("ibox"),
valueBoxOutput("vbox")
)
)
)
server <- function(input, output) {
output$ibox <- renderInfoBox({
infoBox(
"Title",
input$count,
icon = icon("credit-card")
)
})
output$vbox <- renderValueBox({
valueBox(
"Title",
input$count,
icon = icon("credit-card")
)
})
}
shinyApp(ui, server)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?untar
shiny::runApp()
